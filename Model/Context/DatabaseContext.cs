//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v4.2.5.1
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace MiRest_V2
{

   public partial class DatabaseContext : DbContext
   {
        public DbSet<User> UserCredentials { get; set; }
        public DbSet<Tracking> Trackings { get; set; }

        private readonly IConfiguration _config;

        public User AuthenticateUser (string username, string password)
        {
            return UserCredentials.FirstOrDefault(u => u.Username == username && u.Password == password);
        }
        public DatabaseContext(DbContextOptions<DatabaseContext> options, IConfiguration configuration) : base(options)
        {
            _config = configuration;
        }
        public DatabaseContext(IConfiguration configuration)
        {
            _config = configuration;
        }
        partial void CustomInit(DbContextOptionsBuilder optionsBuilder)
        {
#if DEBUG
            optionsBuilder.UseMySql(_config.GetConnectionString("dev"), ServerVersion.AutoDetect(_config.GetConnectionString("dev")), optionsBuilder =>
            {
                optionsBuilder.SchemaBehavior(Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlSchemaBehavior.Ignore);
            });
#else
            optionsBuilder.UseMySql(Config.GetConnectionString("live"), ServerVersion.AutoDetect(Config.GetConnectionString("live")), optionsBuilder =>
            {
                optionsBuilder.SchemaBehavior(Pomelo.EntityFrameworkCore.MySql.Infrastructure.MySqlSchemaBehavior.Ignore);
            });
#endif
        }

        partial void OnModelCreatedImpl(ModelBuilder modelBuilder)
        {
            var allRegisteredEntityTypes = modelBuilder.Model.GetEntityTypes();

            foreach (var registreredEntityType in allRegisteredEntityTypes)
            {
                registreredEntityType.SetTableOptions(new Dictionary<string, string> { { "engine", "innodb" } });

            }
        }
   }
}
